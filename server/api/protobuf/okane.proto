syntax = "proto3";

package okanepb;

option go_package = "github.com/NikhilSharma03/Okane/server/api/protobuf/okane;okanepb";

import "google/type/money.proto";
import "google/api/annotations.proto";

// User messages
message User {
    string id = 1;
    string name = 2;
    string email = 3;
    string password = 4;
    google.type.Money balance = 5;
}

// CreateUserRequest is used in CreateUser rpc request
message CreateUserRequest {
    User user_data = 1; 
}

// CreateUserResponse is used in CreateUser returns
message CreateUserResponse {
    string message = 1;
    User user_data = 2; 
}

// GetUserByIDRequest is used in GetUserByID rpc request
message GetUserByIDRequest {
    string id = 1;
    string email = 2;
}

// GetUserByIDResponse is used in GetUserByID returns
message GetUserByIDResponse {
    string message = 1;
    string token = 2;
    User user_data = 3; 
}

// UpdateUserByIDRequest is used in UpdateUserByID rpc request
message UpdateUserByIDRequest {
    string id = 1;
    string email = 2;
    string name = 3;
    string password = 4;
}

// UpdateUserByIDResponse is used in UpdateUserByID returns
message UpdateUserByIDResponse {
    string message = 1;
    User user_data = 2; 
}

// DeleteUserByIDRequest is used in DeleteUserByID rpc request
message DeleteUserByIDRequest {
    string id = 1;
    string email = 2;
}

// DeleteUserByIDResponse is used in DeleteUserByID returns
message DeleteUserByIDResponse {
    string message = 1;
    User user_data = 2; 
}

// Okane User Service
service OkaneUser {
    // Create User creates a new User
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/user"
            body: "*"
        };
    };

    // Get User By ID returns the user with provided ID
    rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse) {
        option (google.api.http) = {
            get:"/api/user/{email}"
        };
    };

    // Update User By ID updates the user with provided ID
    rpc UpdateUserByID(UpdateUserByIDRequest) returns (UpdateUserByIDResponse) {
        option (google.api.http) = {
            patch: "/api/user/{email}"
            body: "*"
        };
    };
    
    // Delete User By ID deletes the user with provided ID
    rpc DeleteUserByID(DeleteUserByIDRequest) returns (DeleteUserByIDResponse) {
        option (google.api.http) = {
            delete: "/api/user/{email}"
        };
    };
}


// Expense messages
message Expense {
    enum EXPENSE_TYPE {
        CREDIT = 0;
        DEBIT = 1;
    }
    string id = 1;
    string user_id = 2;
    string title = 3;
    string description = 4;
    google.type.Money amount = 5;
    EXPENSE_TYPE type = 6;
}

// CreateExpenseRequest is used in CreateExpense rpc request
message CreateExpenseRequest {
    Expense expense_data = 1; 
}

// CreateExpenseResponse is used in CreateExpense returns
message CreateExpenseResponse {
    string message = 1;
    Expense expense_data = 2; 
}

// GetExpenseRequest is used in GetExpense rpc request
message GetExpenseRequest {
    string user_id = 1;
}

// GetExpenseResponse is used in GetExpense returns
message GetExpenseResponse {
    string message = 1;
    repeated Expense expenses_data = 2; 
}

// GetExpenseByIDRequest is used in GetExpenseByID rpc request
message GetExpenseByIDRequest {
    string id = 1;
}

// GetExpenseByIDResponse is used in GetExpenseByID returns
message GetExpenseByIDResponse {
    string message = 1;
    Expense expenses_data = 2; 
}

// UpdateExpenseByIDRequest is used in UpdateExpenseByID rpc request
message UpdateExpenseByIDRequest {
    string id = 1;
    Expense expense_data = 2;
}

// UpdateExpenseByIDResponse is used in UpdateExpenseByID returns
message UpdateExpenseByIDResponse {
    string message = 1;
    Expense expense_data = 2; 
}

// DeleteExpenseByIDRequest is used in DeleteExpenseByID rpc request
message DeleteExpenseByIDRequest {
    string id = 1;
}

// DeleteExpenseByIDResponse is used in DeleteExpenseByID returns
message DeleteExpenseByIDResponse {
    string message = 1;
    Expense expense_data = 2; 
}

// Okane Expense Service
service OkaneExpense {
    // Create Expense creates a new Expense
    rpc CreateExpense(CreateExpenseRequest) returns (CreateExpenseResponse) {
        option (google.api.http) = {
            post: "/api/expense"
            body: "*"
        };
    };

    // Get Expense returns all the expenses by the provided user id
    rpc GetExpense(GetExpenseRequest) returns (GetExpenseResponse) {
        option (google.api.http) = {
            get:"/api/expense/user/{user_id}"
        };
    };

    // Get Expense By ID returns the expense by the provided expense id
    rpc GetExpenseByID(GetExpenseByIDRequest) returns (GetExpenseByIDResponse) {
        option (google.api.http) = {
            get:"/api/expense/{id}"
        };
    };

    // Update Expense updates the expense by the provided expense id
    rpc UpdateExpenseByID(UpdateExpenseByIDRequest) returns (UpdateExpenseByIDResponse) {
        option (google.api.http) = {
            patch: "/api/expense/{id}"
            body: "*"
        };
    };

    // Delete Expense deletes the expense by the provided expense id
    rpc DeleteExpenseByID(DeleteExpenseByIDRequest) returns (DeleteExpenseByIDResponse) {
        option (google.api.http) = {
            delete: "/api/expense/{id}"
        };
    };
}